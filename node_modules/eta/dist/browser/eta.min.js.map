{"version":3,"file":"eta.min.js","sources":["../../src/err.ts","../../src/polyfills.ts","../../src/utils.ts","../../src/parse.ts","../../src/compile-string.ts","../../src/storage.ts","../../src/containers.ts","../../src/config.ts","../../src/compile.ts","../../src/render.ts"],"sourcesContent":["function setPrototypeOf(obj: any, proto: any) {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\n// This is pretty much the only way to get nice, extended Errors\n// without using ES6\n\n/**\n * This returns a new Error with a custom prototype. Note that it's _not_ a constructor\n *\n * @param message Error message\n *\n * **Example**\n *\n * ```js\n * throw EtaErr(\"template not found\")\n * ```\n */\n\nexport default function EtaErr(message: string): Error {\n  var err = new Error(message)\n  setPrototypeOf(err, EtaErr.prototype)\n  return err\n}\n\nEtaErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Eta Error', enumerable: false }\n})\n\n/**\n * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.\n */\n\nexport function ParseErr(message: string, str: string, indx: number) {\n  var whitespace = str.slice(0, indx).split(/\\n/)\n\n  var lineNo = whitespace.length\n  var colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw EtaErr(message)\n}\n","import EtaErr from './err'\n\n/**\n * @returns The global Promise function\n */\n\nexport var promiseImpl: PromiseConstructor = new Function('return this')().Promise\n\n/**\n * @returns A new AsyncFunction constuctor\n */\n\nexport function getAsyncFunctionConstructor(): Function {\n  try {\n    return new Function('return (async function(){}).constructor')()\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\"This environment doesn't support async/await\")\n    } else {\n      throw e\n    }\n  }\n}\n\n/**\n * str.trimLeft polyfill\n *\n * @param str - Input string\n * @returns The string with left whitespace removed\n *\n */\n\nexport function trimLeft(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimLeft) {\n    return str.trimLeft()\n  } else {\n    return str.replace(/^\\s+/, '')\n  }\n}\n\n/**\n * str.trimRight polyfill\n *\n * @param str - Input string\n * @returns The string with right whitespace removed\n *\n */\n\nexport function trimRight(str: string): string {\n  // eslint-disable-next-line no-extra-boolean-cast\n  if (!!String.prototype.trimRight) {\n    return str.trimRight()\n  } else {\n    return str.replace(/\\s+$/, '') // TODO: do we really need to replace BOM's?\n  }\n}\n","// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\nimport { trimLeft, trimRight } from './polyfills'\n\n/* TYPES */\n\nimport type { EtaConfig } from './config'\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '>': '&gt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\n/* END TYPES */\n\nexport function hasOwnProp(obj: object, prop: string) {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n\nexport function copyProps<T>(toObj: T, fromObj: T) {\n  for (var key in fromObj) {\n    if (hasOwnProp((fromObj as unknown) as object, key)) {\n      toObj[key] = fromObj[key]\n    }\n  }\n  return toObj\n}\n\n/**\n * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`\n */\n\nfunction trimWS(\n  str: string,\n  config: EtaConfig,\n  wsLeft: string | false,\n  wsRight?: string | false\n): string {\n  var leftTrim\n  var rightTrim\n\n  if (Array.isArray(config.autoTrim)) {\n    // kinda confusing\n    // but _}} will trim the left side of the following string\n    leftTrim = config.autoTrim[1]\n    rightTrim = config.autoTrim[0]\n  } else {\n    leftTrim = rightTrim = config.autoTrim\n  }\n\n  if (wsLeft || wsLeft === false) {\n    leftTrim = wsLeft\n  }\n\n  if (wsRight || wsRight === false) {\n    rightTrim = wsRight\n  }\n\n  if (!rightTrim && !leftTrim) {\n    return str\n  }\n\n  if (leftTrim === 'slurp' && rightTrim === 'slurp') {\n    return str.trim()\n  }\n\n  if (leftTrim === '_' || leftTrim === 'slurp') {\n    // console.log('trimming left' + leftTrim)\n    // full slurp\n\n    str = trimLeft(str)\n  } else if (leftTrim === '-' || leftTrim === 'nl') {\n    // nl trim\n    str = str.replace(/^(?:\\r\\n|\\n|\\r)/, '')\n  }\n\n  if (rightTrim === '_' || rightTrim === 'slurp') {\n    // full slurp\n    str = trimRight(str)\n  } else if (rightTrim === '-' || rightTrim === 'nl') {\n    // nl trim\n    str = str.replace(/(?:\\r\\n|\\n|\\r)$/, '') // TODO: make sure this gets \\r\\n\n  }\n\n  return str\n}\n\n/**\n * A map of special HTML characters to their XML-escaped equivalents\n */\n\nvar escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}\n\nfunction replaceChar(s: string): string {\n  return escMap[s]\n}\n\n/**\n * XML-escapes an input value after converting it to a string\n *\n * @param str - Input value (usually a string)\n * @returns XML-escaped string\n */\n\nfunction XMLEscape(str: any) {\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  var newStr = String(str)\n  if (/[&<>\"']/.test(newStr)) {\n    return newStr.replace(/[&<>\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nexport { trimWS, XMLEscape }\n","import { ParseErr } from './err'\nimport { trimWS } from './utils'\n\n/* TYPES */\n\nimport type { EtaConfig } from './config'\n\nexport type TagType = 'r' | 'e' | 'i' | ''\n\nexport interface TemplateObject {\n  t: TagType\n  val: string\n}\n\nexport type AstObject = string | TemplateObject\n\n/* END TYPES */\n\nvar templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g\n\nvar singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g\n\nvar doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g\n\n/** Escape special regular expression characters inside a string */\n\nfunction escapeRegExp(string: string) {\n  // From MDN\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport default function parse(str: string, config: EtaConfig): Array<AstObject> {\n  var buffer: Array<AstObject> = []\n  var trimLeftOfNextStr: string | false = false\n  var lastIndex = 0\n  var parseOptions = config.parse\n\n  if (config.plugins) {\n    for (var i = 0; i < config.plugins.length; i++) {\n      var plugin = config.plugins[i]\n      if (plugin.processTemplate) {\n        str = plugin.processTemplate(str, config)\n      }\n    }\n  }\n\n  /* Adding for EJS compatibility */\n  if (config.rmWhitespace) {\n    // Code taken directly from EJS\n    // Have to use two separate replaces here as `^` and `$` operators don't\n    // work well with `\\r` and empty lines don't work well with the `m` flag.\n    // Essentially, this replaces the whitespace at the beginning and end of\n    // each line and removes multiple newlines.\n    str = str.replace(/[\\r\\n]+/g, '\\n').replace(/^\\s+|\\s+$/gm, '')\n  }\n  /* End rmWhitespace option */\n\n  templateLitReg.lastIndex = 0\n  singleQuoteReg.lastIndex = 0\n  doubleQuoteReg.lastIndex = 0\n\n  function pushString(strng: string, shouldTrimRightOfString?: string | false) {\n    if (strng) {\n      // if string is truthy it must be of type 'string'\n\n      strng = trimWS(\n        strng,\n        config,\n        trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n        shouldTrimRightOfString\n      )\n\n      if (strng) {\n        // replace \\ with \\\\, ' with \\'\n        // we're going to convert all CRLF to LF so it doesn't take more than one replace\n\n        strng = strng.replace(/\\\\|'/g, '\\\\$&').replace(/\\r\\n|\\n|\\r/g, '\\\\n')\n\n        buffer.push(strng)\n      }\n    }\n  }\n\n  var prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (\n    accumulator,\n    prefix\n  ) {\n    if (accumulator && prefix) {\n      return accumulator + '|' + escapeRegExp(prefix)\n    } else if (prefix) {\n      // accumulator is falsy\n      return escapeRegExp(prefix)\n    } else {\n      // prefix and accumulator are both falsy\n      return accumulator\n    }\n  },\n  '')\n\n  var parseOpenReg = new RegExp(\n    '([^]*?)' + escapeRegExp(config.tags[0]) + '(-|_)?\\\\s*(' + prefixes + ')?\\\\s*',\n    'g'\n  )\n\n  var parseCloseReg = new RegExp(\n    '\\'|\"|`|\\\\/\\\\*|(\\\\s*(-|_)?' + escapeRegExp(config.tags[1]) + ')',\n    'g'\n  )\n  // TODO: benchmark having the \\s* on either side vs using str.trim()\n\n  var m\n\n  while ((m = parseOpenReg.exec(str))) {\n    lastIndex = m[0].length + m.index\n\n    var precedingString = m[1]\n    var wsLeft = m[2]\n    var prefix = m[3] || '' // by default either ~, =, or empty\n\n    pushString(precedingString, wsLeft)\n\n    parseCloseReg.lastIndex = lastIndex\n    var closeTag\n    var currentObj: AstObject | false = false\n\n    while ((closeTag = parseCloseReg.exec(str))) {\n      if (closeTag[1]) {\n        var content = str.slice(lastIndex, closeTag.index)\n\n        parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex\n\n        trimLeftOfNextStr = closeTag[2]\n\n        var currentType: TagType = ''\n        if (prefix === parseOptions.exec) {\n          currentType = 'e'\n        } else if (prefix === parseOptions.raw) {\n          currentType = 'r'\n        } else if (prefix === parseOptions.interpolate) {\n          currentType = 'i'\n        }\n\n        currentObj = { t: currentType, val: content }\n        break\n      } else {\n        var char = closeTag[0]\n        if (char === '/*') {\n          var commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex)\n\n          if (commentCloseInd === -1) {\n            ParseErr('unclosed comment', str, closeTag.index)\n          }\n          parseCloseReg.lastIndex = commentCloseInd\n        } else if (char === \"'\") {\n          singleQuoteReg.lastIndex = closeTag.index\n\n          var singleQuoteMatch = singleQuoteReg.exec(str)\n          if (singleQuoteMatch) {\n            parseCloseReg.lastIndex = singleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '\"') {\n          doubleQuoteReg.lastIndex = closeTag.index\n          var doubleQuoteMatch = doubleQuoteReg.exec(str)\n\n          if (doubleQuoteMatch) {\n            parseCloseReg.lastIndex = doubleQuoteReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        } else if (char === '`') {\n          templateLitReg.lastIndex = closeTag.index\n          var templateLitMatch = templateLitReg.exec(str)\n          if (templateLitMatch) {\n            parseCloseReg.lastIndex = templateLitReg.lastIndex\n          } else {\n            ParseErr('unclosed string', str, closeTag.index)\n          }\n        }\n      }\n    }\n    if (currentObj) {\n      buffer.push(currentObj)\n    } else {\n      ParseErr('unclosed tag', str, m.index + precedingString.length)\n    }\n  }\n\n  pushString(str.slice(lastIndex, str.length), false)\n\n  if (config.plugins) {\n    for (var i = 0; i < config.plugins.length; i++) {\n      var plugin = config.plugins[i]\n      if (plugin.processAST) {\n        buffer = plugin.processAST(buffer, config)\n      }\n    }\n  }\n\n  return buffer\n}\n","import Parse from './parse'\n\n/* TYPES */\n\nimport type { EtaConfig } from './config'\nimport type { AstObject } from './parse'\n\n/* END TYPES */\n\n/**\n * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result\n *\n * **Example**\n *\n * ```js\n * compileToString(\"Hi <%= it.user %>\", eta.config)\n * // \"var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\"\n * ```\n */\n\nexport default function compileToString(str: string, config: EtaConfig): string {\n  var buffer: Array<AstObject> = Parse(str, config)\n\n  var res =\n    \"var tR='',__l,__lP\" +\n    (config.include ? ',include=E.include.bind(E)' : '') +\n    (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +\n    '\\nfunction layout(p,d){__l=p;__lP=d}\\n' +\n    (config.useWith ? 'with(' + config.varName + '||{}){' : '') +\n    compileScope(buffer, config) +\n    (config.includeFile\n      ? 'if(__l)tR=' +\n        (config.async ? 'await ' : '') +\n        `includeFile(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\n      : config.include\n      ? 'if(__l)tR=' +\n        (config.async ? 'await ' : '') +\n        `include(__l,Object.assign(${config.varName},{body:tR},__lP))\\n`\n      : '') +\n    'if(cb){cb(null,tR)} return tR' +\n    (config.useWith ? '}' : '')\n\n  if (config.plugins) {\n    for (var i = 0; i < config.plugins.length; i++) {\n      var plugin = config.plugins[i]\n      if (plugin.processFnString) {\n        res = plugin.processFnString(res, config)\n      }\n    }\n  }\n\n  return res\n}\n\n/**\n * Loops through the AST generated by `parse` and transform each item into JS calls\n *\n * **Example**\n *\n * ```js\n * // AST version of 'Hi <%= it.user %>'\n * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]\n * compileScope(templateAST, eta.config)\n * // \"tR+='Hi ';tR+=E.e(it.user);\"\n * ```\n */\n\nfunction compileScope(buff: Array<AstObject>, config: EtaConfig) {\n  var i = 0\n  var buffLength = buff.length\n  var returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    var currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      var str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str + \"'\\n\"\n    } else {\n      var type = currentBlock.t // ~, s, !, ?, r\n      var content = currentBlock.val || ''\n\n      if (type === 'r') {\n        // raw\n\n        if (config.filter) {\n          content = 'E.filter(' + content + ')'\n        }\n\n        returnStr += 'tR+=' + content + '\\n'\n      } else if (type === 'i') {\n        // interpolate\n\n        if (config.filter) {\n          content = 'E.filter(' + content + ')'\n        }\n\n        if (config.autoEscape) {\n          content = 'E.e(' + content + ')'\n        }\n        returnStr += 'tR+=' + content + '\\n'\n        // reference\n      } else if (type === 'e') {\n        // execute\n        returnStr += content + '\\n' // you need a \\n in case you have <% } %>\n      }\n    }\n  }\n\n  return returnStr\n}\n","import { copyProps } from './utils'\n\n/**\n * Handles storage and accessing of values\n *\n * In this case, we use it to store compiled template functions\n * Indexed by their `name` or `filename`\n */\nclass Cacher<T> {\n  constructor(private cache: Record<string, T>) {}\n  define(key: string, val: T) {\n    this.cache[key] = val\n  }\n  get(key: string): T {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove(key: string) {\n    delete this.cache[key]\n  }\n  reset() {\n    this.cache = {}\n  }\n  load(cacheObj: Record<string, T>) {\n    copyProps(this.cache, cacheObj)\n  }\n}\n\nexport { Cacher }\n","import { Cacher } from './storage'\n\n/* TYPES */\n\nimport type { TemplateFunction } from './compile'\n\n/* END TYPES */\n\n/**\n * Eta's template storage\n *\n * Stores partials and cached templates\n */\n\nvar templates = new Cacher<TemplateFunction>({})\n\nexport { templates }\n","import { templates } from './containers'\nimport { copyProps, XMLEscape } from './utils'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport type { TemplateFunction } from './compile'\nimport type { Cacher } from './storage'\n\ntype trimConfig = 'nl' | 'slurp' | false\n\nexport interface EtaConfig {\n  /** Whether or not to automatically XML-escape interpolations. Default true */\n  autoEscape: boolean\n\n  /** Configure automatic whitespace trimming. Default `[false, 'nl']` */\n  autoTrim: trimConfig | [trimConfig, trimConfig]\n\n  /** Compile to async function */\n  async: boolean\n\n  /** Whether or not to cache templates if `name` or `filename` is passed */\n  cache: boolean\n\n  /** XML-escaping function */\n  e: (str: string) => string\n\n  /** Parsing options */\n  parse: {\n    /** Which prefix to use for evaluation. Default `\"\"` */\n    exec: string\n\n    /** Which prefix to use for interpolation. Default `\"=\"` */\n    interpolate: string\n\n    /** Which prefix to use for raw interpolation. Default `\"~\"` */\n    raw: string\n  }\n\n  /** Array of plugins */\n  plugins: Array<{ processFnString?: Function; processAST?: Function; processTemplate?: Function }>\n\n  /** Remove all safe-to-remove whitespace */\n  rmWhitespace: boolean\n\n  /** Delimiters: by default `['<%', '%>']` */\n  tags: [string, string]\n\n  /** Holds template cache */\n  templates: Cacher<TemplateFunction>\n\n  /** Name of the data object. Default `it` */\n  varName: string\n\n  /** Absolute path to template file */\n  filename?: string\n\n  /** Holds cache of resolved filepaths. Set to `false` to disable */\n  filepathCache?: Record<string, string> | false\n\n  /** A filter function applied to every interpolation or raw interpolation */\n  filter?: Function\n\n  /** Function to include templates by name */\n  include?: Function\n\n  /** Function to include templates by filepath */\n  includeFile?: Function\n\n  /** Name of template */\n  name?: string\n\n  /** Where should absolute paths begin? Default '/' */\n  root?: string\n\n  /** Make data available on the global object instead of varName */\n  useWith?: boolean\n\n  /** Whether or not to cache templates if `name` or `filename` is passed: duplicate of `cache` */\n  'view cache'?: boolean\n\n  /** Directory or directories that contain templates */\n  views?: string | Array<string>\n\n  [index: string]: any // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport interface EtaConfigWithFilename extends EtaConfig {\n  filename: string\n}\n\nexport type PartialConfig = Partial<EtaConfig>\n\n/* END TYPES */\n\n/**\n * Include a template based on its name (or filepath, if it's already been cached).\n *\n * Called like `include(templateNameOrPath, data)`\n */\n\nfunction includeHelper(this: EtaConfig, templateNameOrPath: string, data: object): string {\n  var template = this.templates.get(templateNameOrPath)\n  if (!template) {\n    throw EtaErr('Could not fetch template \"' + templateNameOrPath + '\"')\n  }\n  return template(data, this)\n}\n\n/** Eta's base (global) configuration */\nvar config: EtaConfig = {\n  async: false,\n  autoEscape: true,\n  autoTrim: [false, 'nl'],\n  cache: false,\n  e: XMLEscape,\n  include: includeHelper,\n  parse: {\n    exec: '',\n    interpolate: '=',\n    raw: '~'\n  },\n  plugins: [],\n  rmWhitespace: false,\n  tags: ['<%', '%>'],\n  templates: templates,\n  useWith: false,\n  varName: 'it'\n}\n\n/**\n * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result\n *\n * @param override Partial configuration object\n * @param baseConfig Partial configuration object to merge before `override`\n *\n * **Example**\n *\n * ```js\n * let customConfig = getConfig({tags: ['!#', '#!']})\n * ```\n */\n\nfunction getConfig(override: PartialConfig, baseConfig?: EtaConfig): EtaConfig {\n  // TODO: run more tests on this\n\n  var res: PartialConfig = {} // Linked\n  copyProps(res, config) // Creates deep clone of eta.config, 1 layer deep\n\n  if (baseConfig) {\n    copyProps(res, baseConfig)\n  }\n\n  if (override) {\n    copyProps(res, override)\n  }\n\n  return res as EtaConfig\n}\n\n/** Update Eta's base config */\n\nfunction configure(options: PartialConfig) {\n  return copyProps(config, options)\n}\n\nexport { config, getConfig, configure }\n","import compileToString from './compile-string'\nimport { getConfig } from './config'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport type { EtaConfig, PartialConfig } from './config'\nimport type { CallbackFn } from './file-handlers'\nimport { getAsyncFunctionConstructor } from './polyfills'\nexport type TemplateFunction = (data: object, config: EtaConfig, cb?: CallbackFn) => string\n\n/* END TYPES */\n\n/**\n * Takes a template string and returns a template function that can be called with (data, config, [cb])\n *\n * @param str - The template string\n * @param config - A custom configuration object (optional)\n *\n * **Example**\n *\n * ```js\n * let compiledFn = eta.compile(\"Hi <%= it.user %>\")\n * // function anonymous()\n * let compiledFnStr = compiledFn.toString()\n * // \"function anonymous(it,E,cb\\n) {\\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\\n}\"\n * ```\n */\n\nexport default function compile(str: string, config?: PartialConfig): TemplateFunction {\n  var options: EtaConfig = getConfig(config || {})\n  var ctor // constructor\n\n  /* ASYNC HANDLING */\n  // The below code is modified from mde/ejs. All credit should go to them.\n  if (options.async) {\n    ctor = getAsyncFunctionConstructor() as FunctionConstructor\n  } else {\n    ctor = Function\n  }\n  /* END ASYNC HANDLING */\n  try {\n    return new ctor(\n      options.varName,\n      'E', // EtaConfig\n      'cb', // optional callback\n      compileToString(str, options)\n    ) as TemplateFunction // eslint-disable-line no-new-func\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      throw EtaErr(\n        'Bad template syntax\\n\\n' +\n          e.message +\n          '\\n' +\n          Array(e.message.length + 1).join('=') +\n          '\\n' +\n          compileToString(str, options) +\n          '\\n' // This will put an extra newline before the callstack for extra readability\n      )\n    } else {\n      throw e\n    }\n  }\n}\n","import compile from './compile'\nimport { getConfig } from './config'\nimport { promiseImpl } from './polyfills'\nimport EtaErr from './err'\n\n/* TYPES */\n\nimport type { EtaConfig, PartialConfig } from './config'\nimport type { TemplateFunction } from './compile'\nimport type { CallbackFn } from './file-handlers'\n\n/* END TYPES */\n\nfunction handleCache(template: string | TemplateFunction, options: EtaConfig): TemplateFunction {\n  var templateFunc\n\n  if (options.cache && options.name && options.templates.get(options.name)) {\n    return options.templates.get(options.name)\n  }\n\n  if (typeof template === 'function') {\n    templateFunc = template\n  } else {\n    templateFunc = compile(template, options)\n  }\n\n  // Note that we don't have to check if it already exists in the cache;\n  // it would have returned earlier if it had\n  if (options.cache && options.name) {\n    options.templates.define(options.name, templateFunc)\n  }\n\n  return templateFunc\n}\n\n/**\n * Render a template\n *\n * If `template` is a string, Eta will compile it to a function and then call it with the provided data.\n * If `template` is a template function, Eta will call it with the provided data.\n *\n * If `config.async` is `false`, Eta will return the rendered template.\n *\n * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.\n * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template\n *\n * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.\n *\n * @param template Template string or template function\n * @param data Data to render the template with\n * @param config Optional config options\n * @param cb Callback function\n */\n\nexport default function render(\n  template: string | TemplateFunction,\n  data: object,\n  config?: PartialConfig,\n  cb?: CallbackFn\n): string | Promise<string> | void {\n  var options = getConfig(config || {})\n\n  if (options.async) {\n    var result\n    if (cb) {\n      // If user passes callback\n      try {\n        // Note: if there is an error while rendering the template,\n        // It will bubble up and be caught here\n        var templateFn = handleCache(template, options)\n        templateFn(data, options, cb)\n      } catch (err) {\n        return cb(err)\n      }\n    } else {\n      // No callback, try returning a promise\n      if (typeof promiseImpl === 'function') {\n        return new promiseImpl(function (resolve: Function, reject: Function) {\n          try {\n            result = handleCache(template, options)(data, options)\n            resolve(result)\n          } catch (err) {\n            reject(err)\n          }\n        })\n      } else {\n        throw EtaErr(\"Please provide a callback function, this env doesn't support Promises\")\n      }\n    }\n  } else {\n    return handleCache(template, options)(data, options)\n  }\n}\n"],"names":["EtaErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","create","name","value","enumerable","promiseImpl","Function","Promise","copyProps","toObj","fromObj","key","prop","hasOwnProperty","call","trimWS","config","wsLeft","wsRight","leftTrim","rightTrim","isArray","autoTrim","trim","String","trimLeft","replace","trimRight","escMap","&","<",">","\"","'","replaceChar","s","templateLitReg","singleQuoteReg","doubleQuoteReg","escapeRegExp","string","parse","buffer","trimLeftOfNextStr","lastIndex","parseOptions","plugins","i","plugin","processTemplate","pushString","strng","shouldTrimRightOfString","push","rmWhitespace","m","prefixes","exec","interpolate","raw","reduce","accumulator","prefix","parseOpenReg","RegExp","tags","parseCloseReg","index","closeTag","precedingString","currentObj","content","currentType","t","val","char","commentCloseInd","indexOf","processAST","compileToString","Parse","res","include","includeFile","useWith","varName","buff","buffLength","returnStr","currentBlock","type","filter","autoEscape","compileScope","async","processFnString","templates","cache","this","Cacher","cacheObj","e","newStr","test","templateNameOrPath","data","template","get","getConfig","override","baseConfig","compile","ctor","options","SyntaxError","getAsyncFunctionConstructor","handleCache","templateFunc","define","cb","resolve","reject","templateFn"],"mappings":"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"}